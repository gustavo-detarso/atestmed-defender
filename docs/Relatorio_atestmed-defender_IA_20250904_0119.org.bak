#+LATEX_COMPILER: xelatex
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \usepackage{unicode-math}
#+INCLUDE: "/home/gustavodetarso/Documentos/.share/header_mps_org/header_mps.org"

#+LATEX_HEADER: \usepackage[none]{hyphenat}
#+LATEX_HEADER: \sloppy
#+LATEX_HEADER: \emergencystretch =3em
* RELATÓRIO INSTITUCIONAL – SISTEMA atestmed-defender *

* Introdução

No coração do sistema = gerar_documentacao_projeto.py= encontra-se um sofisticado script em Python, desenvolvido para revolucionar a geração de relatórios institucionais. Por meio da inteligência artificial, este script produz documentos no formato Org-mode, amplamente reconhecido por sua eficácia na organização e documentação, assegurando que cada relatório seja elaborado de maneira eficiente e com um tom coeso. O processo de geração é cuidadosamente segmentado, dividindo as tarefas em chamadas menores para evitar sobrecarga, e oferece a possibilidade de um pós-polimento, garantindo que o tom de cada seção do relatório permaneça harmonioso e consistente.

A operação do script é altamente personalizável, permitindo que os usuários ajustem variáveis de ambiente como =DOC_MODEL=, =DOC_SUMMARY_MODEL= e =DOC_POST_POLISH=, que definem o comportamento do script e os modelos de IA utilizados. O script também conta com funções para coletar código de projetos, formatar nomes de arquivos e interagir com a API da OpenAI, possibilitando a geração de resumos e a conclusão de textos. Sua flexibilidade é ampliada por capacidades de tokenização, que permitem a contagem de tokens em mensagens e textos, além de funções para leitura de arquivos e manipulação de strings.

Complementando o sistema, o arquivo =cli_textual.py= disponibiliza uma interface de linha de comando para o monitoramento e gerenciamento de banco de dados, com funcionalidades que incluem a importação de arquivos CSV e o cálculo de indicadores estratégicos como ICRA, IATD e Score Final. Esses indicadores são fundamentais para a análise de desempenho e eficiência, oferecendo insights valiosos para a tomada de decisões. A interface interativa, desenvolvida com a biblioteca= asciimatics =, facilita a manipulação de dados e a exibição de mensagens, tornando o processo de análise mais acessível e intuitivo. A versão aprimorada do script, = gerar_documentacao_projeto_XE_PATCHED.py =, assegura a exportação via XeLaTeX, mantendo a estrutura e funcionalidades principais, ao mesmo tempo em que melhora a integração de verbatim e cabeçalhos, garantindo que a documentação gerada seja não apenas funcional, mas também esteticamente agradável.


* Contexto do Problema

No contexto do sistema, o arquivo =gerar_documentacao_projeto.py= desempenha um papel crucial na automatização da geração de relatórios institucionais, utilizando inteligência artificial para produzir documentos em formato Org-mode. Este script é projetado para operar de maneira eficiente, dividindo o processo em chamadas menores para evitar sobrecarga e permitindo um pós-polimento opcional que garante a uniformidade do tom em cada seção do relatório. A configuração do script é altamente personalizável por meio de variáveis de ambiente, como =DOC_MODEL= e =DOC_SUMMARY_MODEL=, que determinam os modelos de IA a serem utilizados, além de outras variáveis que controlam aspectos como a geração de PDFs e o polimento final do documento.

O script =cli_textual.py= oferece uma interface de linha de comando para o monitoramento e gerenciamento de banco de dados, facilitando a importação de arquivos CSV e o cálculo de indicadores estratégicos, como ICRA e IATD, fundamentais para a análise de desempenho e eficiência das tarefas. A biblioteca= asciimatics= é utilizada para criar uma interface de usuário interativa, permitindo uma manipulação de dados mais intuitiva e a exibição clara de mensagens.

O sistema também inclui uma versão aprimorada do script original, =gerar_documentacao_projeto_XE_PATCHED.py=, que garante a exportação via XeLaTeX, mantendo a estrutura e funcionalidades principais, mas com melhorias significativas na integração de verbatim e cabeçalhos. Esses scripts, juntamente com os arquivos de relatórios e verificações, como = make_impact_report.py =e= make_kpi_report.py =, são projetados para facilitar a documentação e análise de projetos, utilizando IA para gerar relatórios de forma eficiente e organizada. Os indicadores estratégicos, como o Score Final, desempenham um papel vital na avaliação do impacto e na tomada de decisões informadas, assegurando que as análises de tarefas sejam conduzidas com precisão e relevância.


* Soluções Desenvolvidas

No sistema, foram desenvolvidas diversas soluções inovadoras para otimizar a documentação e a análise de projetos, utilizando inteligência artificial para gerar relatórios de forma eficiente e organizada. O arquivo =gerar_documentacao_projeto.py= é um exemplo notável, sendo um script em Python que cria relatórios institucionais no formato Org-mode. Este processo é realizado de maneira fragmentada, dividindo o trabalho em chamadas menores para evitar sobrecarga, e oferece a opção de um pós-polimento para unificar o tom das seções. A configuração do script é flexível, permitindo a definição de variáveis de ambiente como =DOC_MODEL=, =DOC_SUMMARY_MODEL= e =DOC_POST_POLISH=, que determinam o comportamento do script e os modelos de IA a serem utilizados. Além disso, o script possui funções para coletar código de projetos, formatar nomes de arquivos e interagir com a API da OpenAI para gerar resumos e completar textos.

Outro componente essencial do sistema é o arquivo =cli_textual.py=, que fornece uma interface de linha de comando para monitoramento e gerenciamento de banco de dados. Este script inclui funcionalidades para importar arquivos CSV e calcular indicadores estratégicos, como ICRA, IATD e Score Final, que são fundamentais para a avaliação de desempenho e eficiência das análises de tarefas. Utilizando a biblioteca =asciimatics=, ele cria uma interface de usuário interativa, facilitando a manipulação de dados e a exibição de mensagens de forma clara e acessível.

Além disso, o arquivo =gerar_documentacao_projeto_XE_PATCHED.py= representa uma versão aprimorada do script original, garantindo a exportação via XeLaTeX e mantendo a mesma estrutura e funcionalidades principais, com melhorias na integração de verbatim e cabeçalhos. Esses scripts, juntamente com outros arquivos como =make_impact_report.py= e =make_kpi_report.py=, são projetados para facilitar a documentação e a análise de projetos, assegurando que as informações sejam apresentadas de maneira clara e precisa, contribuindo para a tomada de decisões estratégicas informadas.


* Indicadores Estratégicos

Os indicadores estratégicos são fundamentais para o sistema, pois oferecem uma base sólida para a análise e avaliação de desempenho. No contexto do projeto, os arquivos =make_impact_report.py= e =make_kpi_report.py= são essenciais para a geração de relatórios que sintetizam dados complexos em insights acionáveis. Esses relatórios são elaborados com o suporte de inteligência artificial, o que garante precisão e eficiência na apresentação dos resultados. Indicadores como ICRA (Índice de Conformidade e Risco Associado), IATD (Índice de Avaliação de Tarefas e Desempenho) e o Score Final são métricas cruciais que proporcionam uma visão abrangente sobre a eficácia das operações e ajudam a identificar áreas que necessitam de melhorias.

O sistema adota uma abordagem fragmentada para a geração de documentos, dividindo o processo em chamadas menores para evitar sobrecarga e assegurar a consistência do tom em cada seção. Essa metodologia é facilitada pela configuração de variáveis de ambiente, como =DOC_MODEL= e =DOC_SUMMARY_MODEL=, que definem o comportamento do script e os modelos de IA a serem utilizados. A integração com a API da OpenAI para a geração de resumos e textos completos garante que os relatórios sejam não apenas informativos, mas também coerentes e bem estruturados.

Os arquivos localizados em =graphs_and_tables= e =r_checks=, como =compare_indicadores_composto.py= e =01_nc_rate_check.R=, são utilizados para a análise comparativa e verificação de dados, contribuindo para a robustez dos relatórios gerados. Esses scripts são projetados para facilitar a documentação e análise de projetos, permitindo que os usuários monitorem e gerenciem dados de forma interativa e eficiente. A interface de linha de comando, fornecida pelo =cli_textual.py=, complementa essa funcionalidade, oferecendo uma maneira intuitiva de importar dados e calcular indicadores, assegurando que as decisões estratégicas sejam baseadas em informações precisas e atualizadas.


* Importância para a Gestão Estratégica

A relevância do script =gerar_documentacao_projeto.py= para a gestão estratégica no sistema está em sua capacidade de converter dados complexos em relatórios claros e organizados, utilizando inteligência artificial. Esse processo é fundamental para a tomada de decisões informadas, pois possibilita que os gestores acessem informações cruciais de maneira eficiente. A fragmentação do trabalho em chamadas menores evita sobrecargas e assegura que cada seção do relatório mantenha um tom uniforme, o que é essencial para a coesão e clareza do documento final. A configuração de variáveis de ambiente, como =DOC_MODEL= e =DOC_SUMMARY_MODEL=, permite personalizar o comportamento do script, garantindo que ele atenda às necessidades específicas de cada projeto.

Adicionalmente, o script =cli_textual.py= complementa essa funcionalidade ao oferecer uma interface de linha de comando para o monitoramento e gerenciamento de dados, facilitando a importação de arquivos CSV e o cálculo de indicadores estratégicos. Indicadores como ICRA, IATD e Score Final são vitais na avaliação do desempenho e na identificação de áreas de melhoria, permitindo que a gestão ajuste suas estratégias com base nas análises de tarefas realizadas. A capacidade de manipular dados e exibir mensagens de forma interativa por meio da biblioteca= asciimatics= torna o processo de análise mais acessível e dinâmico.

A versão aprimorada do script, =gerar_documentacao_projeto_XE_PATCHED.py=, que assegura a exportação via XeLaTeX, reforça ainda mais a importância desses scripts para a gestão estratégica. Com melhorias na integração de verbatim e cabeçalhos, ele garante que os relatórios gerados sejam não apenas precisos, mas também apresentem um formato profissional e consistente. Em conjunto, esses scripts e suas funcionalidades avançadas são fundamentais para a documentação e análise de projetos no sistema, permitindo que a gestão estratégica se baseie em dados sólidos e relatórios bem estruturados.


* Importância do Uso de Inteligência Artificial

A importância do uso de inteligência artificial no sistema é inegável, especialmente na automatização e otimização da geração de relatórios institucionais. O script =gerar_documentacao_projeto.py=, localizado na pasta raiz do projeto, exemplifica essa aplicação ao utilizar IA para criar documentos em formato Org-mode de maneira eficiente e organizada. O processo é realizado de forma fragmentada, dividindo o trabalho em chamadas menores para evitar sobrecarga, o que demonstra a capacidade da inteligência artificial de lidar com tarefas complexas de maneira escalável. Além disso, o script permite um pós-polimento opcional, garantindo que o tom de cada seção do relatório seja unificado e consistente, o que é crucial para a clareza e profissionalismo dos documentos gerados.

A configuração de variáveis de ambiente, como =DOC_MODEL= e =DOC_SUMMARY_MODEL=, possibilita que o script se adapte a diferentes necessidades, ajustando o comportamento e os modelos de IA utilizados. Essa personalização é fundamental para que os relatórios atendam aos requisitos específicos de cada projeto. A capacidade de interagir com a API da OpenAI para gerar resumos e completar textos é outro exemplo de como a inteligência artificial pode ser integrada de maneira eficaz em processos de documentação, reduzindo o tempo e o esforço necessários para produzir relatórios detalhados e precisos.

Além disso, a inteligência artificial desempenha um papel estratégico na análise de indicadores como ICRA, IATD e Score Final, que são fundamentais para a avaliação de desempenho e a tomada de decisões informadas. Esses indicadores ajudam a identificar áreas de melhoria e a medir o impacto das análises de tarefas, fornecendo insights valiosos que podem orientar estratégias futuras. No contexto do sistema, a IA não apenas facilita a geração de relatórios, mas também aprimora a capacidade de análise e interpretação de dados, tornando-se uma ferramenta indispensável para a gestão e otimização de projetos.


* Impactos Institucionais

Os impactos institucionais do sistema são amplos e significativos, refletindo-se na eficiência e na precisão dos processos de documentação e análise de projetos. O script =gerar_documentacao_projeto.py=, por exemplo, utiliza inteligência artificial para gerar relatórios em formato Org-mode, dividindo o trabalho em chamadas menores para evitar sobrecarga e permitindo um pós-polimento opcional para unificar o tom das seções. Esse processo não apenas otimiza o tempo, mas também assegura que os relatórios sejam consistentes e de alta qualidade. A configuração de variáveis de ambiente, como =DOC_MODEL= e =DOC_SUMMARY_MODEL=, possibilita a personalização do comportamento do script e dos modelos de IA utilizados, garantindo que as necessidades específicas de cada projeto sejam atendidas.

Adicionalmente, o sistema inclui o script =cli_textual.py=, que oferece uma interface de linha de comando para o monitoramento e gerenciamento de banco de dados. Este script é essencial para a importação de arquivos CSV e o cálculo de indicadores estratégicos, como ICRA, IATD e Score Final, fundamentais para a análise de desempenho e a tomada de decisões informadas. A interface interativa criada com a biblioteca = asciimatics= facilita a manipulação de dados e a exibição de mensagens, tornando o processo mais acessível e eficiente para os usuários.

A versão aprimorada do script original, =gerar_documentacao_projeto_XE_PATCHED.py=, garante a exportação via XeLaTeX, mantendo a estrutura e funcionalidades principais, mas com melhorias na integração de verbatim e cabeçalhos. Esta atualização é crucial para a produção de documentos de alta qualidade que atendem aos padrões institucionais. Em conjunto, os scripts e arquivos do sistema, como =make_impact_report.py= e =make_kpi_report.py=, além dos diversos scripts de verificação em R, como =01_nc_rate_check.R= e =02_le15s_check.R=, são projetados para facilitar a documentação e análise de projetos, utilizando IA para gerar relatórios de forma eficiente e organizada. Esses componentes trabalham em sinergia para garantir que as análises de tarefas sejam conduzidas com precisão e que os resultados sejam apresentados de maneira clara e compreensível.


* Conclusão

Na conclusão deste projeto, é evidente que o sistema =gerar_documentacao_projeto.py= desempenha um papel crucial na automação e eficiência da geração de relatórios institucionais. Utilizando inteligência artificial, o script facilita a criação de documentos em formato Org-mode e assegura que cada seção do relatório mantenha um tom coeso por meio de um pós-polimento opcional. A configuração de variáveis de ambiente, como =DOC_MODEL= e =DOC_POST_POLISH=, permite personalizar o comportamento do script, garantindo que ele atenda às necessidades específicas de cada projeto.

A integração com a API da OpenAI para a geração de resumos e a conclusão de textos destaca a capacidade do sistema de lidar com grandes volumes de dados de maneira fragmentada, evitando sobrecargas e garantindo a precisão dos resultados. A versão aprimorada, =gerar_documentacao_projeto_XE_PATCHED.py=, reforça essa eficiência ao incorporar melhorias na exportação via XeLaTeX, mantendo a estrutura e funcionalidades principais do script original.

Os arquivos de suporte, como =cli_textual.py=, ampliam as funcionalidades do sistema, oferecendo uma interface de linha de comando para o monitoramento e gerenciamento de dados, essencial para a análise de indicadores estratégicos como ICRA, IATD e Score Final. Esses indicadores são fundamentais para avaliar o desempenho e a eficácia das análises de tarefas, fornecendo insights valiosos para a tomada de decisões. Em suma, o sistema =gerar_documentacao_projeto.py=, com seus scripts associados, representa uma ferramenta poderosa para a documentação e análise de projetos, promovendo uma abordagem organizada e eficiente na utilização de inteligência artificial.


* Arquivos e Saídas Utilizados pelo Relatório

=./reports/make_impact_report.py= O arquivo é um script em Python que gera um relatório chamado "Impacto na Fila", utilizando as bibliotecas ReportLab e Matplotlib para criar um PDF e imagens PNG de alta resolução. O script insere um cabeçalho e uma introdução no PDF, converte-os em títulos e parágrafos, e gera várias imagens, como gráficos de curva do cotovelo e diagramas de tornado. Ele também organiza os dados em tabelas, removendo colunas específicas e ordenando os dados de acordo com critérios predefinidos, como IV, Excesso e NC. As métricas são formatadas com duas casas decimais, e os nomes dos peritos são padronizados em Title Case. O script integra-se com outro módulo para obter dados dos 10 piores peritos, e utiliza o PdfMerger para manipulação de PDFs.

=./reports/make_kpi_report.py= Este arquivo é um script em Python que gera relatórios ATESTMED, que podem ser individuais ou focados nos 10 principais indicadores. Ele combina gráficos gerados em Python, análises realizadas em R, e comentários para criar relatórios em formatos Org e PDF. O script também analisa padrões de dias da semana versus fins de semana e inclui apêndices. Ele organiza os diretórios de trabalho, como o diretório de banco de dados e de exportação de gráficos, e carrega variáveis de ambiente de um arquivo .env, se disponível. O script utiliza a biblioteca PyPDF2 para manipulação de PDFs e pandas para manipulação de dados.

=graphs_and_tables/compare_fifteen_seconds.py= Este script em Python compara a porcentagem de tarefas concluídas em menos de um determinado tempo (THRESHOLD) entre um perito específico ou os 10 piores peritos e o restante do Brasil. Ele normaliza as durações das tarefas e calcula a proporção de tarefas concluídas dentro do limite de tempo especificado. O script oferece várias opções de exportação, incluindo gráficos PNG, arquivos Org, e comentários automáticos gerados por uma API. Ele também pode exibir gráficos ASCII no terminal. O script utiliza matplotlib para geração de gráficos e tenta usar plotext para gráficos ASCII, se disponível.

=graphs_and_tables/compare_indicadores_composto.py= O arquivo é um script em Python que compara indicadores compostos de produtividade entre um perito específico ou os 10 piores peritos e o restante do Brasil. Ele gera gráficos de barras e linhas para quatro indicadores principais: porcentagem de não conformidade, produtividade em relação ao alvo, tarefas concluídas em menos de 15 segundos, e sobreposição de análises. O script permite a exclusão de análises com duração superior a uma hora e oferece opções para definir cortes específicos para os indicadores. As saídas incluem gráficos PNG, arquivos Org, e comentários automáticos, com a opção de exibir gráficos ASCII no terminal.

=graphs_and_tables/compare_motivos_perito_vs_brasil.py= Este script em Python compara o percentual de motivos de não conformidade (NC) entre um perito específico ou o grupo dos 10 piores peritos e o restante do Brasil. Ele utiliza descrições de motivos no eixo X dos gráficos, com fallback para códigos, e considera uma definição robusta de NC. O script é compatível com diferentes esquemas de banco de dados e utiliza Matplotlib para gerar gráficos PNG em ambientes sem interface gráfica. As saídas incluem arquivos Org, Markdown, PNG, e comentários automáticos, com opções para ajustar visualmente os rótulos dos gráficos. Ele também oferece parâmetros para filtrar motivos antes de determinar os Top-N.

=graphs_and_tables/compare_nc_rate.py= Este arquivo é um script em Python que compara a porcentagem de motivos de não conformidade (NC) entre um perito específico ou o grupo dos 10 piores peritos e o restante do Brasil. Ele utiliza descrições de motivos no eixo X dos gráficos e considera uma definição robusta de NC. O script é compatível com diferentes esquemas de banco de dados e utiliza Matplotlib para gerar gráficos PNG em ambientes sem interface gráfica. As saídas incluem arquivos Org, Markdown, PNG, e comentários automáticos, com opções para ajustar visualmente os rótulos dos gráficos. Ele também oferece parâmetros para filtrar motivos antes de determinar os Top-N.

=graphs_and_tables/compare_overlap.py= Este script em Python é projetado para comparar a produtividade de um perito específico ou dos 10 piores peritos em relação ao restante do Brasil, excluindo o grupo em questão. Ele utiliza Matplotlib para gerar gráficos em ambientes sem interface gráfica e oferece a opção de criar gráficos ASCII usando plotext, se disponível. O script permite a especificação de um limiar de produtividade e o número mínimo de análises para elegibilidade no Top 10. Ele também tenta integrar-se com um módulo de comentários para gerar insights automáticos, embora essa funcionalidade não seja mais obrigatória.

=graphs_and_tables/compare_productivity.py= O arquivo é um script em Python que analisa a produtividade de peritos, comparando um perito específico ou os 10 piores peritos com o restante do Brasil. Ele utiliza Matplotlib para gerar gráficos em ambientes sem interface gráfica e oferece a opção de criar gráficos ASCII com plotext, se disponível. O script permite definir um limiar de produtividade e o número mínimo de análises para inclusão no Top 10. Ele também inclui um parser de argumentos para especificar datas de início e término, além de opções para exportar os resultados em diferentes formatos.

=graphs_and_tables/g_weekday_to_weekend_table.py= Este arquivo Python, intitulado "=g_weekday_to_weekend_table.py=", gera uma tabela que detalha as tarefas iniciadas em dias úteis e concluídas no fim de semana, categorizadas por perito, matrícula, CR e DR. Ele oferece várias opções de saída, incluindo CSV, arquivos .org, PDF e PNG, que são armazenados no diretório especificado por --out-dir. As principais flags incluem --db para especificar o banco de dados, --start e --end para definir o período de análise, e opções de exportação como --export-csv, --export-org, --export-pdf, --export-png e --export-protocols. A flag --verbose pode ser usada para exibir mensagens de log durante a execução.

=r_checks/01_nc_rate_check.R= Este script R utiliza várias bibliotecas, incluindo optparse, DBI, RSQLite, dplyr, ggplot2 e scales, para realizar operações relacionadas ao banco de dados e visualização de dados. Ele tenta carregar um arquivo de configuração comum chamado "=_common.R=" e, caso não o encontre, utiliza funções de fallback internas. As funções de fallback incluem am_normalize_cli para normalizar argumentos de linha de comando, am_parse_args para analisar argumentos de linha de comando, am_open_db para abrir uma conexão com um banco de dados SQLite, e am_resolve_export_dir para resolver o diretório de exportação. O script é projetado para ser flexível e adaptável, permitindo que os usuários especifiquem caminhos de diretório e argumentos de linha de comando conforme necessário.= r_checks/02_le15s_check.R =>>> Este arquivo Rscript é semelhante ao anterior, utilizando as mesmas bibliotecas e estrutura para realizar operações de análise de dados e visualização. Ele também tenta carregar um arquivo de configuração comum "=_common.R =" e fornece funções de fallback caso o arquivo não esteja disponível. As funções de fallback incluem am_normalize_cli, am_parse_args, am_open_db e am_resolve_export_dir, que ajudam a gerenciar argumentos de linha de comando, conexões de banco de dados e diretórios de exportação. Este script é projetado para ser executado em um ambiente de linha de comando, permitindo que os usuários especifiquem parâmetros e caminhos conforme necessário para suas análises.= r_checks/03_productivity_check.R =>>> Este script R é mais um exemplo de um arquivo que utiliza bibliotecas como optparse, DBI, RSQLite, dplyr, ggplot2 e scales para realizar análises de dados e gerar visualizações. Ele segue a mesma estrutura dos arquivos anteriores, tentando carregar um arquivo "=_common.R =" e fornecendo funções de fallback caso o arquivo não seja encontrado. As funções de fallback incluem am_normalize_cli, am_parse_args, am_open_db e am_resolve_export_dir, que são essenciais para o funcionamento do script em ambientes onde o arquivo comum não está disponível. Este script é projetado para ser flexível e adaptável, permitindo que os usuários especifiquem parâmetros de execução conforme necessário.= r_checks/04_overlap_check.R =>>> Este script Rscript é projetado para realizar análises estatísticas e gerar gráficos utilizando bibliotecas como optparse, DBI, RSQLite, dplyr, ggplot2, scales e lubridate. Ele tenta carregar um arquivo de configuração comum "=_common.R =" e, caso não o encontre, utiliza funções de fallback internas. As funções de fallback incluem am_normalize_cli para normalizar argumentos de linha de comando, am_parse_args para analisar argumentos de linha de comando, am_open_db para abrir uma conexão com um banco de dados SQLite, e am_resolve_export_dir para resolver o diretório de exportação. Este script é ideal para usuários que precisam realizar análises de dados complexas e gerar visualizações em um ambiente de linha de comando.= r_checks/05_motivos_chisq.R =>>> Este script Rscript é focado em gerar apêndices estatísticos relacionados a motivos NC, comparando peritos com outros grupos. As saídas incluem arquivos de imagem e texto em formatos PNG e ORG, com nomes que incorporam o identificador seguro do perito. O script utiliza bibliotecas como optparse, DBI, RSQLite, dplyr, ggplot2, stringr, forcats e scales para realizar suas análises e visualizações. Ele tenta carregar um arquivo de configuração comum "=_common.R =" e fornece funções de fallback caso o arquivo não esteja disponível. As funções de fallback incluem am_normalize_cli, am_parse_args, am_open_db e am_resolve_export_dir, que ajudam a gerenciar argumentos de linha de comando, conexões de banco de dados e diretórios de exportação.= r_checks/06_composite_robustness.R =>>> Este script Rscript é projetado para realizar análises de dados e gerar visualizações utilizando bibliotecas como optparse, DBI, RSQLite, dplyr, ggplot2 e scales. Ele segue a mesma estrutura dos arquivos anteriores, tentando carregar um arquivo "=_common.R =" e fornecendo funções de fallback caso o arquivo não seja encontrado. As funções de fallback incluem am_normalize_cli, am_parse_args, am_open_db e am_resolve_export_dir, que são essenciais para o funcionamento do script em ambientes onde o arquivo comum não está disponível. Este script é ideal para usuários que precisam realizar análises de dados complexas e gerar visualizações em um ambiente de linha de comando.= r_checks/07_kpi_icra_iatd_score.R =>>> Este script Rscript é utilizado para calcular KPIs como ICRA, IATD e ScoreFinal, comparando peritos com o resto do Brasil. As saídas incluem arquivos de imagem e texto em formatos PNG, ORG e MD, com nomes que incorporam um identificador seguro. O uso do script é detalhado, permitindo especificar o banco de dados, o período de análise, o nome do perito e o diretório de saída. Ele utiliza bibliotecas como optparse, DBI, RSQLite, dplyr= r_checks/08_weighted_props.R =>>> Este arquivo é um script em R que utiliza várias bibliotecas, incluindo DBI, RSQLite, dplyr, ggplot2, scales, stringr e tibble, para realizar operações de consulta em um banco de dados SQLite. O script define funções auxiliares para manipulação de consultas e detecção de tabelas e colunas no banco de dados. Ele inclui um prólogo específico para o arquivo "= 08_weighted_props.R =", que fornece funções robustas para consultas e detecção de tabelas/colunas sem abrir ou fechar conexões de banco de dados. As funções definidas, como `am_dbGetQuery`, `am_detect_analises_table` e `am_detect_columns`, são usadas para garantir que as op= r_checks/_ensure_deps.R =>>> erações de banco de dados sejam realizadas de forma eficiente e segura. O script também verifica a existência de várias variáveis globais, como `start_d`, `end_d`, `top10`, `perito`, `min_n`, `threshold`, `measure` e `export_dir`, que são essenciais para a execução correta do script.= r_checks/_ensure_deps.R =>>> Este arquivo é um script em R que foi gerado automaticamente pelo "= make_report.py =" e não deve ser editado manualmente. Ele configura o repositório CRAN para a instalação de pacotes R e ajusta o caminho da biblioteca do usuário, se existir. O script verifica a presença de pacotes necessários, como dplyr, tidyr, readr, stringr, purrr, forcats, l= r_checks/g01_top10_nc_rate_check.R =>>> ubridate, ggplot2, scales, broom, DBI, RSQLite, ggtext, gridtext, ragg, textshaping, cli, glue, curl e httr. Caso algum pacote esteja faltando, ele tenta instalá-los usando o número máximo de CPUs disponíveis, menos um. Se todos os pacotes já estiverem instalados, ele informa que todos os pacotes estão presentes. O script também verifica se as dependências do sistema, como libcurl, harfbuzz, fribidi e freetype, estão instaladas, e exibe informações da sessão R ao final.= r_checks/g01_top10_nc_rate_check.R =>>> Este arquivo é um script em R que utiliza várias bibliotecas, incluindo DBI, RSQLite, ggplot2, dplyr, stringr e scales, para realizar operações de análise= r_checks/g02_top10_le15s_check.R =>>> de dados. O script contém um prólogo que tenta carregar um arquivo comum de configuração "=_common.R =" de diferentes diretórios, e, caso não encontre, utiliza fallbacks internos. Ele define funções auxiliares para normalizar argumentos de linha de comando, analisar argumentos, abrir conexões de banco de dados e resolver diretórios de exportação. As funções `am_normalize_cli`, `am_parse_args`, `am_open_db` e `am_resolve_export_dir` são essenciais para a configuração e execução do script, permitindo que ele lide com argumentos de entrada, conexões de banco de dados e diretórios de saída de forma flexível e robusta.= r_checks/g02_top10_le15s_check.R =>>> Este arquiv= r_checks/g03_top10_productivity_check.R =>>> o é um script em R que utiliza bibliotecas como DBI, RSQLite, ggplot2, dplyr, lubridate, scales e stringr para realizar análises de dados. O script inclui um prólogo que tenta carregar um arquivo de configuração comum "=_common.R =" de diferentes locais, e, se não encontrado, utiliza fallbacks internos. Ele define funções auxiliares para normalizar argumentos de linha de comando, analisar argumentos, abrir conexões de banco de dados e resolver diretórios de exportação. As funções `am_normalize_cli`, `am_parse_args`, `am_open_db` e `am_resolve_export_dir` são fundamentais para a operação do script, permitindo que ele gerencie argumentos de e= r_checks/g04_top10_overlap_check.R =>>> ntrada, conexões de banco de dados e diretórios de saída de maneira eficiente e adaptável.= r_checks/g03_top10_productivity_check.R =>>> Este arquivo é um script em R que utiliza bibliotecas como DBI, RSQLite, ggplot2, dplyr, lubridate, scales e stringr para realizar operações de análise de dados. O script contém um prólogo que tenta carregar um arquivo de configuração comum "=_common.R =" de diferentes diretórios, e, caso não encontre, utiliza fallbacks internos. Ele define funções auxiliares para normalizar argumentos de linha de comando, analisar argumentos, abrir conexões de banco de dados e resolver diretórios de exportação. As funções `am_normalize_cli`, `am_parse_= r_checks/g05_top10_motivos_chisq.R =>>> args`, `am_open_db` e `am_resolve_export_dir` são essenciais para a configuração e execução do script, permitindo que ele lide com argumentos de entrada, conexões de banco de dados e diretórios de saída de forma flexível e robusta.= r_checks/g04_top10_overlap_check.R =>>> Este arquivo é um script em R que utiliza bibliotecas como DBI, RSQLite, ggplot2, dplyr, lubridate, purrr, stringr e scales para realizar análises de dados. O script inclui um prólogo que tenta carregar um arquivo de configuração comum "=_common.R =" de diferentes locais, e, se não encontrado, utiliza fallbacks internos. Ele define funções auxiliares para normalizar argumentos de linha de comando,= r_checks/g06_top10_composite_robustness.R =>>> analisar argumentos, abrir conexões de banco de dados e resolver diretórios de exportação. As funções `am_normalize_cli`, `am_parse_args`, `am_open_db` e `am_resolve_export_dir` são fundamentais para a operação do script, permitindo que ele gerencie argumentos de entrada, conexões de banco de dados e diretórios de saída de maneira eficiente e adaptável.= r_checks/g05_top10_motivos_chisq.R =>>> Este arquivo é um script em R que realiza uma análise estatística dos motivos NC, comparando o Top 10 de um grupo específico com o restante do Brasil. Ele gera três tipos de saídas: uma imagem PNG, um arquivo org com imagem e comentário, e um arquivo org apenas com comentár= r_checks/g07_top10_kpi_icra_iatd_score.R =>>> Este script em R é projetado para gerar relatórios de KPIs (ICRA, IATD, ScoreFinal) comparando os 10 principais grupos com o restante do Brasil. Ele produz três tipos de saídas: uma imagem PNG, um arquivo .org contendo a imagem e comentários, e um arquivo .org apenas com comentários. O script utiliza várias bibliotecas, incluindo optparse para análise de argumentos de linha de comando, DBI e RSQLite para manipulação de banco de dados, e ggplot2 para visualização de dados. Ele tenta carregar um arquivo comum de funções auxiliares =_common.R= e define funções fallback caso o arquivo não seja encontrado. As funções auxiliares incluem a normalização de argumentos de linha de comando, análise de argumentos, conexão com banco de dados SQLite e resolução de diretórios de exportação. O script é configurado para ser executado como um script R independente, utilizando o shebang apropriado.=reports/make_impact_report.py =>>> Este script em Python gera um relatório intitulado "Impacto na Fila", que é produzido em formato PDF e inclui gráficos em PNG de alta resolução. Utilizando bibliotecas como ReportLab e Matplotlib, o script insere cabeçalhos e frentes no PDF, converte textos em títulos e parágrafos, e gera gráficos como Top, Curva do Cotovelo, Tornado, Estratos, Permutação e PSA. Ele também remove referências e colunas específicas das tabelas e ordena os dados de acordo com critérios específicos, como IV, Excesso e NC. As métricas são formatadas com duas casas decimais, e os nomes dos peritos são formatados em Title Case. O script inclui integração com outro módulo para obter os 10 piores peritos e utiliza a biblioteca PyPDF2 para manipulação de PDFs. Ele também possui mecanismos de fallback para garantir a funcionalidade caso algumas importações falhem.= reports/make_kpi_report.py=>>> Este script em Python é responsável por gerar relatórios ATESTMED, que podem ser individuais ou para os 10 principais grupos. Ele combina a geração de gráficos em Python, análises em R, e a montagem de relatórios em formatos Org e PDF. O script também inclui análises de padrões de dias da semana versus finais de semana e apêndices. Ele organiza seus imports no início e define caminhos e diretórios essenciais para o funcionamento, como diretórios de banco de dados, gráficos, scripts, exportações e saídas. O script garante a criação dos diretórios de exportação e saída, se não existirem, e tenta carregar variáveis de ambiente de um arquivo .env na raiz do projeto. Ele utiliza várias bibliotecas, incluindo pandas para manipulação de dados e PyPDF2 para manipulação de PDFs, além de lidar com operações de sistema de arquivos e subprocessos.
